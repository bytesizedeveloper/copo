package org.acme.wallet.mapper;

import jooq.tables.records.WalletRecord;
import org.acme.wallet.api.contract.WalletResponse;
import org.acme.wallet.model.WalletModel;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

/**
 * A MapStruct Mapper interface responsible for translating between core domain models
 * and external data transfer objects (DTOs) for the Wallet API.
 */
@Mapper
public interface WalletMapper {

    /**
     * Singleton instance of the WalletMapper implementation generated by MapStruct.
     * <p>
     * This is the standard way to access a MapStruct mapper in static contexts, such as
     * within JAX-RS resources.
     */
    WalletMapper INSTANCE = Mappers.getMapper(WalletMapper.class);

    /**
     * Converts a domain-layer {@link WalletModel} into an API-layer {@link WalletResponse}.
     * <p>
     * The primary key field {@code id} is ignored as it is generated by the database upon insertion.
     *
     * @param wallet The core domain model containing the wallet data.
     * @return A {@link WalletResponse} DTO ready to be returned via the API.
     */
    WalletResponse modelToResponse(WalletModel wallet);

    @Mapping(target = "id", ignore = true)
    WalletRecord modelToRecord(WalletModel wallet);
}
