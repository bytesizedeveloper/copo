package org.acme.blockchain.transaction.mapper;

import jooq.tables.records.UtxoRecord;
import org.acme.blockchain.transaction.api.contract.UtxoResponse;
import org.acme.blockchain.transaction.model.UtxoModel;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

/**
 * MapStruct interface for defining mappings between the UTXO domain model ({@link UtxoModel}),
 * its database representation ({@link UtxoRecord}), and its API response DTO ({@link UtxoResponse}).
 */
@Mapper(uses = CoinMapper.class)
public interface UtxoMapper {

    /**
     * Singleton instance of the mapper, initialized by MapStruct's Mappers factory.
     */
    UtxoMapper INSTANCE = Mappers.getMapper(UtxoMapper.class);

    /**
     * Converts a {@link UtxoModel} domain object into an API-friendly {@link UtxoResponse} DTO.
     *
     * @param utxoModel The domain model to convert.
     * @return The corresponding response DTO.
     */
    @Mapping(source = "spent", target = "isSpent")
    UtxoResponse modelToResponse(UtxoModel utxoModel);

    /**
     * Converts a {@link UtxoModel} domain object into a database-specific {@link UtxoRecord}.
     * <p>
     * The primary key field {@code id} is ignored as it is generated by the database upon insertion.
     *
     * @param utxoModel The domain model to convert.
     * @return The corresponding jOOQ record object ready for insertion or update.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(source = "spent", target = "isSpent")
    UtxoRecord modelToRecord(UtxoModel utxoModel);

    /**
     * Converts a database-specific {@link UtxoRecord} into a {@link UtxoModel} domain object.
     *
     * @param utxoRecord The database record to convert.
     * @return The corresponding domain model.
     */
    UtxoModel recordToModel(UtxoRecord utxoRecord);
}
